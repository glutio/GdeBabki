@using System.ComponentModel
@using GdeBabki.Client.Model
@using System.Text.Json
@using Radzen.Blazor.Rendering
@inherits ViewBase<EditTagsViewModel>
@inject IJSRuntime JS

<div @ref="refMainDiv" style="position:relative;z-index:1">
    @foreach (var tag in Model.Tags)
    {
        var localTag = tag;
        <div class="inline-div">
            <div style="padding:0.4rem;margin:2px;border-radius:5px;background-color:dimgray;color:white">
                <a href="#" style="color:lightgrey" @onclick="async () => await OnDeleteTagClickAsync(localTag)" @onclick:preventDefault="true">🗙</a>&nbsp;@tag
            </div>
        </div>
    }
    <div class="inline-div">
        <input @ref="refTextBox" type="text" style="outline:none;background-color:transparent;padding:0.4rem;border-width:0 0 1px 0" 
                @bind-value:event="oninput" @onkeydown="OnKeyDownAsync" @bind-value="Model.Tag"/>

    </div>
    @if (Model.SuggestedTags != null)
    {
        SetPopupTopLeft();
        var style = $"position:absolute;top:{popupTopLeft?.Y ?? 0}px;left:{popupTopLeft?.X ?? 0}px";
        <div style="@style">
            <select size="5">
                @foreach (var tag in Model.SuggestedTags)
                {
                    <option value="@tag"></option>
                }
            </select>
        </div>
    }
</div>
<style>
    .inline-div
    {
        float:left;
        z-index:0;
    }
</style>
@code {
    [Parameter]
    public List<string> Tags
    {
        get
        {
            return Model.Tags;
        }
        set
        {
            if (value != Model.Tags)
            {
                Model.Tags = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback<CancelEventArgs<string>> BeforeSave { get; set; }
    [Parameter]
    public EventCallback<CancelEventArgs<string>> BeforeDelete { get; set;}
    [Parameter]
    public EventCallback BeforeSuggestTags { get; set; }

    ElementReference refTextBox;
    ElementReference refMainDiv;
    Point popupTopLeft;

    async Task OnKeyDownAsync(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                await OnKeyDownEnterAsync();
                return;
            case "Backspace":
                await OnKeyDownBackspaceAsync();
                return;
        }

        Model.SuggestTags();
    }

    async Task OnKeyDownEnterAsync()
    {
        if (Model.HasNewTag)
        {
            var cancelArgs = new CancelEventArgs<string>(Model.Tag.ToUpper());
            await BeforeSave.InvokeAsync(cancelArgs);
            if (!cancelArgs.Cancel)
            {
                Model.AddTag();
            }
        }
    }

    async Task OnKeyDownBackspaceAsync()
    {
        if (string.IsNullOrEmpty(Model.Tag) && Model.LastTag != null)
        {
            var cancelArgs = new CancelEventArgs<string>(Model.LastTag);
            await BeforeDelete.InvokeAsync(cancelArgs);
            if (!cancelArgs.Cancel)
            {
                Model.DeleteLastTag();
            }
        }
    }

    async Task OnDeleteTagClickAsync(string tag)
    {
        var cancelArgs = new CancelEventArgs<string>(tag);
        await BeforeDelete.InvokeAsync(cancelArgs);
        if (!cancelArgs.Cancel)
        {
            Model.DeleteTag(tag);
        }        
    }

    void SetPopupTopLeft()
    {
        var js = (IJSInProcessRuntime)JS;
        var textBoxBounds = js.Invoke<ElementBounds>("window.interop_getBoundingClientRect", refTextBox);
        var mainDivBounds = js.Invoke<ElementBounds>("window.interop_getBoundingClientRect", refMainDiv);
        popupTopLeft = new Point()
        {
            Y = textBoxBounds.bottom - mainDivBounds.top,
            X = textBoxBounds.left - mainDivBounds.left
        };

    }

    protected override void OnPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        SetPopupTopLeft();
        base.OnPropertyChanged(sender, e);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        SetPopupTopLeft();
    }

    protected override void OnInitialized()
    {
        Model.Tags = Tags;
        base.OnInitialized();
    }
}
