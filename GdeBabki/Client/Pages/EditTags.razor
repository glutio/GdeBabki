@inherits ViewBase<EditTagsViewModel>

<div>
    @foreach (var tag in Model.Tags)
    {
        <div class="inline-div">
            @{
                var style = $"padding:0.4rem;margin:2px;border-radius:5px;background-color:{tag.ToBackgroundColor()};color:{tag.ToForegroundColor()}"; 
                <div style="@style">
                    <a href="#" style="color:lightgrey" @onclick="async () => await OnDeleteTagClickAsync(tag)" @onclick:preventDefault="true">🗙</a>&nbsp;@tag
                </div>
            }
        </div>
    }
    <div class="inline-div" @onfocusout="OnBlurAsync" @onfocusin="OnFocusAsync">
            <datalist @ref="refDatalist" id="@DataListName">
                @if (Model.SuggestedTags != null)
                {
                        @foreach(var tag in Model.SuggestedTags)
                        {
                            <option value="@tag" />
                        }
                }
            </datalist>
        <input @ref="refTextBox" type="text" style="outline:none;background-color:transparent;padding:0.4rem;border-width:0 0 1px 0" 
                @bind-value:event="oninput" @onkeydown="OnKeyDownAsync" @bind-value="Model.Tag" list="@DataListName"/>
    </div>
</div>
<style>
    .inline-div
    {
        float:left;
        z-index:0;
    }
</style>
@code {
    [Parameter]
    public List<string> Tags
    {
        get
        {
            return Model.Tags;
        }
        set
        {
            if (value != Model.Tags)
            {
                Model.Tags = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback TagsUpdated { get; set; }
    [Parameter]
    public EventCallback<CancelEventArgs<string>> BeforeSave { get; set; }
    [Parameter]
    public EventCallback<CancelEventArgs<string>> BeforeDelete { get; set; }

    string DataListName => $"datalist-{this.GetHashCode()}";

    ElementReference refTextBox;
    ElementReference refDatalist;

    async Task OnKeyDownAsync(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                await OnKeyDownEnterAsync();
                return;
            case "Backspace":
                await OnKeyDownBackspaceAsync();
                return;
            case "Escape":
                await ClearSuggestedTags();
                return;
        }

        await Model.SuggestTags();
    }

    async Task OnKeyDownEnterAsync()
    {
        if (Model.HasNewTag)
        {
            var cancelArgs = new CancelEventArgs<string>(Model.Tag.ToUpper());
            await BeforeSave.InvokeAsync(cancelArgs);
            if (!cancelArgs.Cancel)
            {
                Model.AddTag();
                Model.Tag = null;
                await TagsUpdated.InvokeAsync();
            }
        }
    }

    async Task OnKeyDownBackspaceAsync()
    {
        if (string.IsNullOrEmpty(Model.Tag) && Model.LastTag != null)
        {
            var cancelArgs = new CancelEventArgs<string>(Model.LastTag);
            await BeforeDelete.InvokeAsync(cancelArgs);
            if (!cancelArgs.Cancel)
            {
                Model.DeleteLastTag();
                await TagsUpdated.InvokeAsync();
            }
        }
    }

    async Task OnBlurAsync()
    {        
        {
            await ClearSuggestedTags();            
        }
    }

    async Task OnFocusAsync()
    {
        await Model.SuggestTags();
    }

    Task ClearSuggestedTags()
    {
        Model.SuggestedTags = null;
        return Task.CompletedTask;
    }

    async Task OnDeleteTagClickAsync(string tag)
    {
        var cancelArgs = new CancelEventArgs<string>(tag);
        await BeforeDelete.InvokeAsync(cancelArgs);
        if (!cancelArgs.Cancel)
        {
            Model.DeleteTag(tag);
            await TagsUpdated.InvokeAsync();
        }        
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
