@using System.ComponentModel
@inherits ViewBase<EditTagsViewModel>

<div>
        @foreach (var tag in Model.Tags)
        {
            var localTag = tag;
            <div style="float:left" class="abc">
                <div style="padding:0.4rem;margin:2px;border-radius:5px;background-color:dimgray;color:white">
                    <a href="#" style="color:lightgrey" @onclick="async () => await OnDeleteTagClick(localTag)" @onclick:preventDefault="true">🗙</a>&nbsp;@tag
                </div>
            </div>
        }
        <div style="float:left">
            <input @ref="refTextBox" type="text" style="outline:none;background-color:transparent;padding:0.4rem;border-width:0 0 1px 0" 
                   @bind-value:event="oninput" @onkeydown="OnKeyDown" @bind-value="Model.Tag" />
        </div>
    
</div>
@if (Model.SuggestedTags != null)
{
    <div>
        <select size="5">
            @foreach (var tag in Model.SuggestedTags)
            {
                <option value="@tag"></option>
            }
        </select>
    </div>
}
@code {
    [Parameter]
    public List<string> Tags
    {
        get
        {
            return Model.Tags;
        }
        set
        {
            if (value != Model.Tags)
            {
                Model.Tags = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback<CancelEventArgs<string>> BeforeSave { get; set; }
    [Parameter]
    public EventCallback<CancelEventArgs<string>> BeforeDelete { get; set;}

    ElementReference refTextBox;
    async Task OnKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                await OnKeyDownEnter();
                break;
            case "Backspace":
                await OnKeyDownBackspace();
                break;
            default:
                return;
        }
    }

    async Task OnKeyDownEnter()
    {
        if (Model.HasNewTag)
        {
            var cancelArgs = new CancelEventArgs<string>(Model.Tag.ToUpper());
            await BeforeSave.InvokeAsync(cancelArgs);
            if (!cancelArgs.Cancel)
            {
                Model.AddTag();
            }
        }
    }

    async Task OnKeyDownBackspace()
    {
        if (string.IsNullOrEmpty(Model.Tag) && Model.LastTag != null)
        {
            var cancelArgs = new CancelEventArgs<string>(Model.LastTag);
            await BeforeDelete.InvokeAsync(cancelArgs);
            if (!cancelArgs.Cancel)
            {
                Model.DeleteLastTag();
            }
        }
    }

    async Task OnDeleteTagClick(string tag)
    {
        Console.WriteLine(tag);
        var cancelArgs = new CancelEventArgs<string>(tag);
        await BeforeDelete.InvokeAsync(cancelArgs);
        if (!cancelArgs.Cancel)
        {
            Model.DeleteTag(tag);
        }        
    }

    protected override void OnInitialized()
    {
        Model.Tags = Tags;
        base.OnInitialized();
    }
}
