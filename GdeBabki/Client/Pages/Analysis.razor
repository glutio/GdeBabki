@page "/analysis"
@using System.Linq.Expressions
@inherits ViewBase<AnalysisViewModel>

<BusyLoad Model="Model">
    <RadzenCard>
        @if (!Model.Accounts.IsNullOrEmpty())
        {
            <div class="d-flex flex-row align-items-center">
                <h5 class="m-0 mr-2">Accounts</h5>
                <RadzenCheckBoxList Data="Model.Accounts" @bind-Value="Model.SelectedAccounts" ValueProperty="Id"
                                TValue="Guid" TextProperty="FullName" Change="async args => await OnSelectedAccountsChangedAsync()">
                </RadzenCheckBoxList>
            </div>
        }
        else
        {
            <div class="w100 text-center">Please import your bank transactions to begin</div>
        }
    </RadzenCard>

    @if (!Model.Accounts.IsNullOrEmpty())
    {
        <RadzenCard>
            <div class="d-flex flex-row justify-content-between">
                <div class="d-flex flex-row align-items-center">
                    <h5 class="m-0 mr-2">Exclude Tags</h5>
                    <EditTags Tags="Model.ExcludeTags" TagsUpdated="StateHasChanged"></EditTags>
                </div>
                <div class="d-flex flex-row align-items-center">
                    <h5 class="m-0 mr-2">Date range</h5>
                    <RadzenDropDown Data="Model.DateRange" TValue="AnalysisViewModel.DateRangeFilter" TextProperty="Key" ValueProperty="Value" @bind-Value="Model.SelectedDateRange" Change="args => StateHasChanged()" />
                </div>
            </div>
        </RadzenCard>

        <div>
            @{
                var averageMonthlySpendingByTag = Model.AverageMonthlySpendingByTag;
            }
            @if (!averageMonthlySpendingByTag.IsNullOrEmpty())
            {
                <h4 style="margin-bottom:-20px;margin-top:20px">Average monthly spending</h4>
                var fills = averageMonthlySpendingByTag?.Select(e => e.Key.ToBackgroundColor());
                var strokes = averageMonthlySpendingByTag?.Select(e => e.Key.ToForegroundColor());
                <RadzenChart SeriesClick="OnAverageMonthlySpendingByTagSeriesClick">
                    <RadzenColumnSeries Data="averageMonthlySpendingByTag" CategoryProperty="Key" ValueProperty="Value" Fills="fills" Strokes="strokes" StrokeWidth="1">
                        <TooltipTemplate>
                            <p>@context.Value.ToCurrencyString()</p>
                        </TooltipTemplate>
                    </RadzenColumnSeries>

                    <RadzenLegend Visible="false" />
                    <RadzenColumnOptions Radius="5" />
                    @{
                        var max = averageMonthlySpendingByTag.Max(e => e.Value);
                        var step = max.GetAxisStepSize();
                    }
                    <RadzenValueAxis Formatter="ToCurrencyFormatter" Step="step" Min="0">
                        <RadzenGridLines Visible="true" />
                    </RadzenValueAxis>
                </RadzenChart>
                <p><b>Total</b> @averageMonthlySpendingByTag.Sum(e => e.Value).ToCurrencyString()</p>
                <hr />
            }
        </div>
        <div>
            @{
                var spendingByMonth = Model.SpendingByMonth;
            }
            @if (!spendingByMonth.IsNullOrEmpty())
            {
                <h4 style="margin-bottom:-20px">Spending by month</h4>
                <RadzenChart SeriesClick="OnSpendingByMonthSeriesClick">
                    <RadzenColumnSeries Data="Model.SpendingByMonth" CategoryProperty="Key" ValueProperty="Value">
                        <ChildContent>
                            <RadzenSeriesMeanLine LineType="LineType.Dashed" Stroke="red" StrokeWidth="1" />
                        </ChildContent>
                        <TooltipTemplate>
                            <div style="max-width:500px">
                                <p>@context.Key - @context.Value.ToCurrencyString()</p>
                                <div style="overflow:auto;max-height:500px">
                                    @foreach (var tag in Model.GetTagsInMonth(DateTime.Parse(context.Key)))
                                    {
                                        var style = $"float:left;margin:2px;padding:10px;border-radius:5px;background:{tag.ToBackgroundColor()};color:{tag.ToForegroundColor()}";
                                <span style="@style">@tag</span>
                                    }
                                </div>
                            </div>
                        </TooltipTemplate>
                    </RadzenColumnSeries>
                    @{
                        var max = spendingByMonth.Max(e => e.Value);
                        var step = max.GetAxisStepSize();
                    }
                    <RadzenValueAxis Formatter="ToCurrencyFormatter" Step="step" Min="0">
                        <RadzenGridLines Visible="true" />
                    </RadzenValueAxis>
                    <RadzenLegend Visible="false" />
                    <RadzenColumnOptions Radius="5" />
                </RadzenChart>
                <p>
                    <b>Average</b> @spendingByMonth.Average(e => e.Value).ToCurrencyString() &nbsp;
                    <b>Median</b> @spendingByMonth.Select(e=>e.Value).OrderBy(e=>e).Skip(spendingByMonth.Count/2).First().ToCurrencyString() &nbsp;
                    <b>Total</b> @spendingByMonth.Sum(e => e.Value).ToCurrencyString();
                </p>
                <hr />
            }
        </div>

        <div>
            @if (!spendingByMonth.IsNullOrEmpty())
            {
                var months = spendingByMonth.Select(e => e.Key).ToList();
                var spendingByTagThisMonth = Model.SpendingByTagThisMonth;
                <div class="d-flex flex-row align-items-center" style="@(spendingByTagThisMonth.IsNullOrEmpty() ? "" : "margin-bottom: -20px")">
                    <h4 class="mr-2" style="margin-bottom:0">Spending in</h4>
                    <RadzenDropDown Data="months" @bind-Value="Model.SelectedMonth" TValue="string"></RadzenDropDown>
                </div>
                @if (!spendingByTagThisMonth.IsNullOrEmpty())
                {
                    <RadzenChart SeriesClick="OnSpendingByTagThisMonthSeriesClick">
                        @{
                            var fills = spendingByTagThisMonth.Select(e => e.Key.ToBackgroundColor());
                            var strokes = spendingByTagThisMonth.Select(e => e.Key.ToForegroundColor());
                        }
                        <RadzenColumnSeries Data="spendingByTagThisMonth" ValueProperty="Value" CategoryProperty="Key" Fills="fills" Strokes="strokes" StrokeWidth="1" />
                        @{
                            var max = spendingByTagThisMonth.Max(e => e.Value);
                            var step = max.GetAxisStepSize();
                        }
                        <RadzenValueAxis Formatter="ToCurrencyFormatter" Step="step" Min="0">
                            <RadzenGridLines Visible="true" />
                        </RadzenValueAxis>
                        <RadzenLegend Visible="false" />
                        <RadzenColumnOptions Radius="5" />
                    </RadzenChart>
                    <p>
                        <b>Total</b> @spendingByTagThisMonth.Sum(e => e.Value).ToCurrencyString();
                    </p>
                    <hr />
                }
            }
        </div>

        <div>
            <div class="d-flex flex-row align-items-center" style="margin-bottom: -20px">
                <h4 class="mr-2" style="margin-bottom:0">Spending category</h4>
                <EditTags Tags="Model.SpendingCategoryTags" TagsUpdated="StateHasChanged" />
            </div>
            @{
                var spendingThisTag = Model.SpendingThisTag;
            }
            @if (!spendingThisTag.IsNullOrEmpty())
            {
                <RadzenChart>
                    @foreach (var tagSpending in spendingThisTag)
                    {
                        <RadzenColumnSeries Data="tagSpending.Value" ValueProperty="Value" CategoryProperty="Key" Fill="@tagSpending.Key.ToBackgroundColor()" Stroke="@tagSpending.Key.ToForegroundColor()" StrokeWidth="1" />
                    }

                    @{
                        var max = spendingThisTag.Max(e => e.Value.Max(t => t.Value));
                        var step = max.GetAxisStepSize();
                    }
                    <RadzenValueAxis Formatter="ToCurrencyFormatter" Step="step" Min="0">
                        <RadzenGridLines Visible="true" />
                    </RadzenValueAxis>
                    <RadzenLegend Visible="false" />
                    <RadzenColumnOptions Radius="5" />
                </RadzenChart>
                @foreach(var tagSpending in spendingThisTag)
                {
                    <p> 
                        @tagSpending.Key - 
                        <b>Average</b> @tagSpending.Value.Average(e => e.Value).ToCurrencyString() &nbsp;
                        <b>Median</b> @tagSpending.Value.Select(e=>e.Value).OrderBy(e=>e).Skip(tagSpending.Value.Count/2).First().ToCurrencyString() &nbsp;
                        <b>Total</b> @tagSpending.Value.Sum(e => e.Value).ToCurrencyString()
                    </p>                   
                }
            }
        </div>

    }
</BusyLoad>

@code {


    async Task OnSelectedAccountsChangedAsync()
    {
        await Model.OnSelectedAccountsChangedAsync();
    }

    string ToCurrencyFormatter(object o)
    {
        var d = Convert.ToDecimal(o);
        return d.ToCurrencyString();
    }
    void OnAverageMonthlySpendingByTagSeriesClick(SeriesClickEventArgs args)
    {
        var tag = (string)args.Category;
        if (!string.IsNullOrEmpty(tag) && !Model.ExcludeTags.Contains(tag))
        {
            Model.ExcludeTags.Add(tag);
        }        
    }
    void OnSpendingByMonthSeriesClick(SeriesClickEventArgs args)
    {
        Model.SelectedMonth = (string)args.Category;
    }
    void OnSpendingByTagThisMonthSeriesClick(SeriesClickEventArgs args)
    {
        var tag = (string)args.Category;
        if (!string.IsNullOrEmpty(tag) && !Model.SpendingCategoryTags.Contains(tag))
        {
            Model.SpendingCategoryTags.Add(tag);
        }
    }
}
