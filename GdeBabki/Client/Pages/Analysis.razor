@page "/analysis"
@inherits ViewBase<AnalysisViewModel>
<h3>Analysis</h3>
@if (Model.IsLoaded)
{
    <RadzenCard Style="width: 100%;">
        <h5>Accounts</h5>
        <RadzenCheckBoxList Data="Model.Accounts" @bind-Value="Model.SelectedAccounts" ValueProperty="Id"
                            TValue="Guid" TextProperty="FullName" Change="OnSelectedAccountsChangeAsync">
        </RadzenCheckBoxList>
    </RadzenCard>
    <RadzenCard>
        <h5>Exclude tags</h5>
        <EditTags Tags="Model.ExcludeTags" TagsUpdated="StateHasChanged"></EditTags>
    </RadzenCard>

    <div>
        <h6>Average monthly spending</h6>
        @{
            var fills = Model.AverageMonthlySpendingByTag?.Select(e => e.Key.ToBackgroundColor());
        }
        <RadzenChart>
            <RadzenColumnSeries Data="Model.AverageMonthlySpendingByTag" CategoryProperty="Key" ValueProperty="Value" Fills="fills">
                <TooltipTemplate>
                    <p>@context.Value.ToCurrencyString()</p>
                </TooltipTemplate>                
            </RadzenColumnSeries>
            
            <RadzenLegend Visible="false" />
            <RadzenColumnOptions Radius="5" />
            @{
                var max = Model.AverageMonthlySpendingByTag.Max(e => e.Value);
                var step = max.GetAxisStepSize(5);
            }
            <RadzenValueAxis Formatter="ToCurrencyFormatter" Step="step" Min="0">
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis>
        </RadzenChart>
        @if (!Model.AverageMonthlySpendingByTag.IsNullOrEmpty())
        {
            <p>Total @Model.AverageMonthlySpendingByTag.Sum(e => e.Value).ToCurrencyString()</p>
        }
    </div>

    <div>
        <h6>Spending by month</h6>
        <RadzenChart>
            <RadzenColumnSeries Data="Model.SpendingByMonth" CategoryProperty="Key" ValueProperty="Value">
                <TooltipTemplate>
                    <div style="max-width:500px">
                        <p>@context.Value.ToCurrencyString()</p>
                        <div style="overflow:auto;max-height:500px">
                            @foreach(var tag in Model.GetTagsInMonth(DateTime.Parse(context.Key)))
                            {
                                var style = $"float:left;margin:2px;padding:10px;border-radius:5px;background:{tag.ToBackgroundColor()};color:{tag.ToForegroundColor()}";
                                <span style="@style">@tag</span>
                            }
                        </div>
                    </div>
                </TooltipTemplate>                
            </RadzenColumnSeries>
            @{
                var max = Model.SpendingByMonth.Max(e => e.Value);
                var step = max.GetAxisStepSize(5);
            }
            <RadzenValueAxis Formatter="ToCurrencyFormatter" Step="step" Min="0">
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis>
            <RadzenLegend Visible="false" />
            <RadzenColumnOptions Radius="5" />
        </RadzenChart>
        @if (!Model.SpendingByMonth.IsNullOrEmpty())
        {
            <p>Average @Model.SpendingByMonth.Average(e => e.Value).ToCurrencyString()</p>
        }
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    async Task OnSelectedAccountsChangeAsync()
    {
        await Model.OnSelectedAccountsChangeAsync();
    }

    string ToCurrencyFormatter(object o)
    {
        var d = Convert.ToDecimal(o);
        return d.ToCurrencyString();
    }
}
