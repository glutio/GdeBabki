@page "/review"
@inherits ViewBase<ReviewViewModel>

<h3>Review</h3>
@if (Model.IsLoaded)
{
    <RadzenCard Style="width: 100%;">
        <RadzenCheckBoxList Data="Model.Accounts" @bind-Value="Model.SelectedAccounts" ValueProperty="Id" 
                            TValue="Guid" TextProperty="FullName" Change="OnSelectedAccountsChangeAsync">
        </RadzenCheckBoxList>
    </RadzenCard>

    <RadzenDataGrid @ref="refGrid" TItem="Transaction" Data="Model.Transactions" AllowPaging="true" FilterMode="FilterMode.SimpleWithMenu" 
                    AllowFiltering="true" AllowColumnResize="true" PageSize="12" AllowSorting="true" 
                    SelectionMode="DataGridSelectionMode.Single" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn TItem="Transaction" Property="State" Width="2rem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template>
                    @if (context.State == GBTransactionState.Imported)
                    {
                        <span style="background-color:gold">&nbsp;</span>
                    }
                    else
                    {
                        <span style="background-color:green">&nbsp;</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Transaction" Title="Date" Property="Date" Width="8rem" Filterable="true" FormatString="@GBUtility.TRANSACTION_DATE_FORMAT" TextAlign="TextAlign.Right" SortOrder="SortOrder.Descending">
                <Template>
                    @(context.Date.Day)&nbsp;<b>@(context.Date.ToString("MMM"))&nbsp;@context.Date.Year</b>
                </Template>
                <FooterTemplate>
                    @if (refGrid.View.Count() > 0)
                    {
                        <b>@refGrid.View.GroupBy(e=> new DateTime(e.Date.Year, e.Date.Month, 1)).Select(g=>g.Sum(e=>e.Amount)).Average().ToCurrency()</b>                       
                    }
                </FooterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Transaction" Title="Description" Property="Description" Filterable="true"/>
            <RadzenDataGridColumn TItem="Transaction" Title="Amount" Property="Amount" Width="8rem" Filterable="true" TextAlign="TextAlign.Right">
                <Template>
                    @if (context.Amount < 0)
                    {
                        <span style="color:red">@context.Amount.ToCurrency()</span>
                    }
                    else
                    {
                        <span style="color:green">@context.Amount.ToCurrency()</span>
                    }
                </Template>
                <FooterTemplate>
                    <b>@refGrid.View.Sum(e => e.Amount).ToCurrency() </b>
                </FooterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Transaction" Title="Tags" Property="Tags" Filterable="true" Sortable="false">
                <FilterTemplate>
                    <EditTags></EditTags>
                </FilterTemplate>
                <Template>                    
                    <EditTags Tags="@context.Tags" TagsUpdated="(e) => OnTagsUpdatedAsync(e, context)">
                    </EditTags>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter, SupplyParameterFromQuery]
    public Guid[] AccountIds { get; set; }

    RadzenDataGrid<Transaction> refGrid { get; set; }
    async Task OnSelectedAccountsChangeAsync(IEnumerable<Guid> accounts)
    {
        AccountIds = accounts.ToArray();
        await Model.OnSelectedAccountsChangeAsync();
    }

    protected override void OnInitialized()
    {
        Model.SelectedAccounts = AccountIds;
        base.OnInitialized();
    }

    async Task OnTagsUpdatedAsync(List<string> tags, Transaction transaction)
    {
        transaction.Tags = tags;
        await Model.UpdateTagsAsync(transaction);
    }
}
