@page "/review"
@inherits ViewBase<ReviewViewModel>

<h3>Review</h3>
@if (Model.IsLoaded)
{
    <RadzenCard Style="width: 100%;">
        <RadzenCheckBoxList Data="Model.Accounts" @bind-Value="Model.SelectedAccounts" ValueProperty="Id" TValue="Guid" TextProperty="FullName" Change="OnSelectedAccountsChangeAsync">
        </RadzenCheckBoxList>
    </RadzenCard>

    <RadzenDataGrid TItem="Transaction" Data="Model.Transactions" AllowPaging="true" FilterMode="FilterMode.Simple">
        <Columns>
            <RadzenDataGridColumn TItem="Transaction" Property="State" Width="2rem" >
                <Template>
                    @if (context.State == GBTransactionState.Imported)
                    {
                        <span style="background-color:gold">&nbsp;</span>
                    }
                    else
                    {
                        <span style="background-color:green">&nbsp;</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Transaction" Property="Date">
                <Template>
                    @context.Date.ToShortDateString()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Transaction" Property="Description" Filterable="true"/>
            <RadzenDataGridColumn TItem="Transaction" Property="Amount">
                <Template>
                    @if (context.Amount < 0)
                    {
                        <span style="color:red">@context.Amount.ToString("0.00")</span>
                    }
                    else
                    {
                        <span style="color:green">@context.Amount.ToString("0.00")</span>
                    }
                </Template>
            </RadzenDataGridColumn>      
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter, SupplyParameterFromQuery]
    public Guid[] AccountIds { get; set; }

    async Task OnSelectedAccountsChangeAsync(IEnumerable<Guid> accounts)
    {
        await Model.OnSelectedAccountsChangeAsync();
    }

    protected override void OnInitialized()
    {
        Model.SelectedAccounts = AccountIds;
        base.OnInitialized();
    }
}
