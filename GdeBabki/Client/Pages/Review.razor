@page "/review"
@inherits ViewBase<ReviewViewModel>
@inject ContextMenuService ContextMenuService

<BusyLoad Model="Model">
    <RadzenCard Style="width: 100%;">
        <h5>Accounts</h5>
        <RadzenCheckBoxList Data="Model.Accounts" @bind-Value="Model.SelectedAccounts" ValueProperty="Id"
                        TValue="Guid" TextProperty="FullName" Change="e => OnSelectedAccountsChangedAsync()">
        </RadzenCheckBoxList>
    </RadzenCard>
    <RadzenCard>
        <h5>Shared Tags</h5>
        <div class="d-flex flex-row">
            <div>
                <EditTags @ref="refSharedTags" Tags="Model.SharedTags" BeforeSave="SaveSharedTagAsync" BeforeDelete="DeleteSharedTagAsync"></EditTags>
            </div>
            <div style="flex:auto"></div>
            <div>
                <RadzenButton Icon="cached" Click="ReloadTransactionsAsync"></RadzenButton>
            </div>
        </div>
    </RadzenCard>

    @{
        var activeTransactions = Model.ActiveTransactions;
        var selectedTransactions = Model.SelectedTransactions;
    }
    <RadzenDataGrid @ref="refGrid" TItem="Transaction" Data="Model.TransactionsView" AllowPaging="true" FilterMode="FilterMode.SimpleWithMenu" LoadData="Model.LoadData"
                AllowFiltering="true" AllowColumnResize="true" Count="Model.TransactionsCount" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" AllowSorting="true" 
                SelectionMode="DataGridSelectionMode.Multiple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Filter="OnColumnFilterAsync" 
                @bind-Value="Model.SelectedTransactions" Page="OnPageAsync" Sort="OnSort" CellContextMenu="OnContextMenuAsync" ColumnResized="OnColumnResized">
        <Columns>
            <RadzenDataGridColumn TItem="Transaction" Sortable="false" Filterable="false" Width="3rem">
                <HeaderTemplate>
                    <RadzenCheckBox TValue="bool" Value="!selectedTransactions.IsNullOrEmpty()"
                        Change="@(args => Model.SelectedTransactions = args ? Model.TransactionsQuery.ToList() : null)"></RadzenCheckBox>
                </HeaderTemplate>
                <Template>
                    <RadzenCheckBox @onclick:stopPropagation TValue="bool" Value="selectedTransactions != null && selectedTransactions.Contains(context)" 
                    Change="args => refGrid.SelectRow(context)"></RadzenCheckBox>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Transaction" Property="State" Width="2rem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template>
                    @if (context.State == GBTransactionState.Imported)
                    {
                        <span style="background-color:gold">&nbsp;</span>
                    }
                    else
                    {
                        <span style="background-color:green">&nbsp;</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Transaction" Title="Date" Property="@nameof(Transaction.Date)" Filterable="true" FormatString="{0:d MMM yyyy}" TextAlign="TextAlign.Right" 
                            SortOrder="Model.DataGridColumnState[nameof(Transaction.Date)].SortOrder" FilterOperator="Model.DataGridColumnState[nameof(Transaction.Date)].FilterOperator" 
                            FilterValue="Model.DataGridColumnState[nameof(Transaction.Date)].FilterValue" Width="@($"{Model.DataGridColumnState[nameof(Transaction.Date)].Width}px")">
                <Template>
                    @(context.Date.Day)&nbsp;<b>@(context.Date.ToString("MMM"))&nbsp;@context.Date.Year</b>
                </Template>
                <FooterTemplate>
                    @if (Model.TransactionsCount > 0)
                    {
                        var grouping = activeTransactions.GroupBy(e => new DateTime(e.Date.Year, e.Date.Month, 1));
                        // times a month
                        var timesPerMonth = @grouping.Select(g => g.Count()).Average();
                        <b>@timesPerMonth.ToString("0.#") / </b>
                        // number of months
                        <b>@grouping.Count() / </b>
                        var monthlySpending = @grouping.Select(g => g.Sum(e => e.Amount)).Average();
                        // total per time
                        <b>@((monthlySpending/(decimal)timesPerMonth).ToCurrencyString()) / </b>
                        // total per month
                        <b>@monthlySpending.ToCurrencyString()</b>
                    }
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Transaction" Title="Description" Property="@nameof(Transaction.Description)" Filterable="true" 
                        SortOrder="Model.DataGridColumnState[nameof(Transaction.Description)].SortOrder" FilterOperator="Model.DataGridColumnState[nameof(Transaction.Description)].FilterOperator" 
                        FilterValue="Model.DataGridColumnState[nameof(Transaction.Description)].FilterValue" Width="@($"{Model.DataGridColumnState[nameof(Transaction.Description)].Width}px")" />

            <RadzenDataGridColumn TItem="Transaction" Title="Amount" Property="@nameof(Transaction.Amount)" Filterable="true" TextAlign="TextAlign.Right"
                            SortOrder="Model.DataGridColumnState[nameof(Transaction.Amount)].SortOrder" FilterOperator="Model.DataGridColumnState[nameof(Transaction.Amount)].FilterOperator" 
                            FilterValue="Model.DataGridColumnState[nameof(Transaction.Amount)].FilterValue" Width="@($"{Model.DataGridColumnState[nameof(Transaction.Amount)].Width}px")">
                <Template>
                    @if (context.Amount < 0)
                    {
                        <span style="color:red">@context.Amount.ToCurrencyString()</span>
                    }
                    else
                    {
                        <span style="color:green">@context.Amount.ToCurrencyString()</span>
                    }
                </Template>
                <FooterTemplate>
                    @if (Model.TransactionsCount > 0)
                    {
                        <b>@activeTransactions.Sum(e => e.Amount).ToCurrencyString() </b>
                    }
                </FooterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn  @ref="refTagsFilterColumn" TItem="Transaction" Title="Tags" Property="@nameof(Transaction.Tags)" Filterable="true" Sortable="false" 
                FilterOperator="Model.DataGridColumnState[nameof(Transaction.Tags)].FilterOperator" Width="@($"{Model.DataGridColumnState[nameof(Transaction.Tags)].Width}px")">
                <FilterTemplate>
                    <EditTags @ref="refTagsFilter" Tags="Model.TagsFilterValue" TagsUpdated="ReloadGridAsync"></EditTags>
                    <RadzenDataGridFilterMenu Column="refTagsFilterColumn" Grid="refGrid" TItem="Transaction" />
                </FilterTemplate>
                <Template>
                    <div @onclick:stopPropagation>
                        <EditTags Tags="@context.Tags" BeforeSave="e => SaveTagAsync(e, context)" BeforeDelete="e => DeleteTagAsync(e, context)" TagsUpdated="StateHasChanged">
                        </EditTags>
                    </div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</BusyLoad>

@code {
    [Parameter, SupplyParameterFromQuery]
    public Guid[] AccountIds { get; set; }

    RadzenDataGrid<Transaction> refGrid { get; set; }
    RadzenDataGridColumn<Transaction> refTagsFilterColumn { get; set; }

    EditTags refTagsFilter;
    EditTags refSharedTags;

    protected override void OnInitialized()
    {
        if (!AccountIds.IsNullOrEmpty()) 
        {
            Model.SelectedAccounts = AccountIds;
        }

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Model.IsLoaded && firstRender)
        {
            if (!AccountIds.IsNullOrEmpty())
            {
                await OnSelectedAccountsChangedAsync();
            }
            else
            {
                await refGrid.GoToPage(Model.CurrentPage);
                await ReloadGridAsync();
            }
        }

        base.OnAfterRender(firstRender);
    }

    void OnPageAsync(PagerEventArgs args)
    {
        Model.CurrentPage = args.PageIndex;
    }

    async Task OnSelectedAccountsChangedAsync()
    {
        await Model.OnSelectedAccountsChangedAsync();
        await ReloadGridAsync();
    }

    async Task OnColumnFilterAsync(DataGridColumnFilterEventArgs<Transaction> args)
    {
        Model.DataGridColumnState[args.Column.Property].FilterOperator = args.FilterOperator;
        Model.SelectedTransactions = null;
        await ReloadGridAsync();
    }

    void OnSort(DataGridColumnSortEventArgs<Transaction> args)
    {
        if (!refGrid.AllowMultiColumnSorting)
        {
            foreach (var column in Model.DataGridColumnState.Values)
            {
                column.SortOrder = null;
            }
        }

        Model.DataGridColumnState[args.Column.Property].SortOrder = args.SortOrder;
        Model.IsFrozen = false;
    }

    void OnColumnResized(DataGridColumnResizedEventArgs<Transaction> args)
    {
        Model.DataGridColumnState[args.Column.Property].Width = args.Width;
    }

    void OnContextMenuAsync(DataGridCellMouseEventArgs<Transaction> args)
    {
        if (Model.SelectedTransactions.IsNullOrEmpty())
        {
            return;
        }

        ContextMenuService.Open(args, new List<ContextMenuItem>()
        {
            new ContextMenuItem() { Text = "Remove selected", Value = new Func<Task>(async () => {
                await Model.DeleteSelectedTransactionsAsync();
                await ReloadGridAsync();
            }) }
        }, async e => await ((Func<Task>)e.Value)() );
     }


    async Task ReloadTransactionsAsync(MouseEventArgs args)
    {
        await ReloadGridAsync();
    }

    async Task ReloadGridAsync()
    {
        Model.IsFrozen = false;
        await refGrid.Reload();

        var lastPage = Model.TransactionsCount / refGrid.PageSize;
        if (refGrid.CurrentPage > lastPage)
        {
            await refGrid.GoToPage(lastPage);
        }          
    }

    async Task SaveTagAsync(CancelEventArgs<string> e, Transaction transaction)
    {
        try
        {
            await Model.SaveTagAsync(e.Value, transaction.Id);
        }
        catch
        {
            e.Cancel = true;
            throw;
        }
    }

    async Task DeleteTagAsync(CancelEventArgs<string> e, Transaction transaction)
    {
        try
        {
            await Model.DeleteTagAsync(e.Value, transaction.Id);
        }
        catch
        {
            e.Cancel = true;
            throw;
        }
    }

    async Task SaveSharedTagAsync(CancelEventArgs<string> e)
    {
        try
        {
            await Model.SaveSharedTagAsync(e.Value);
        }
        catch
        {
            e.Cancel = true;
            throw;
        }       
    }

    async Task DeleteSharedTagAsync(CancelEventArgs<string> e)
    {
        try
        {
            await Model.DeleteSharedTagAsync(e.Value);
        }
        catch
        {
            e.Cancel = true;
            throw;
        }
    }
}
