@page "/import"
@using System.IO
@using System.Text
@using GdeBabki.Client.Services
@using GdeBabki.Shared.ViewModels

@inject ImportViewModel Model

<h1>Import</h1>
@if (Model.IsLoaded)
{
    <InputFile OnChange="OnFileChangeAsync" />
    <p>Account</p>
    <RadzenDropDown TValue="Guid" Data="Model.Accounts" ValueProperty="Id" TextProperty="Name" @bind-Value="Model.AccountId">
        <Template>
            @context.Name (@context.Bank.Name)
        </Template>
    </RadzenDropDown>

    <RadzenDataGrid Data="Model.SampleLines" AllowColumnResize="true">
        <Columns>
            @foreach (var i in Enumerable.Range(0, Model.ColumnBindings?.Length ?? 0))
            {            
                <RadzenDataGridColumn TItem="string[]">
                    <HeaderTemplate>
                        <RadzenDropDown 
                            TValue="GBColumnName?" TextProperty="Value" ValueProperty="Key" 
                            Data="Enum.GetValues<GBColumnName>().Select(e => new KeyValuePair<GBColumnName, string>(e, ((GBColumnName)e).ToString())) " 
                            @bind-Value="Model.ColumnBindings[i]"
                            Change="@(e => OnColumnBindingChanged(i, (GBColumnName?)e))"
                        />  
                    </HeaderTemplate>
                    <Template>
                        @context[i]
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
    
    <RadzenButton Click=@OnImportClick>Import</RadzenButton>
}
else
{
    <p>Loading...</p>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        Model.PropertyChanged += (s, e) => StateHasChanged();
        await Model.InitializeAsync();
    }

    async void OnFileChangeAsync(InputFileChangeEventArgs e)
    {
        Model.ImportFile = e.File;
        using var stream = e.File.OpenReadStream();
        Console.WriteLine(stream.Length);
        await Model.LoadSampleLinesAsync(stream, 10);
    }

    void OnColumnBindingChanged(int index, GBColumnName? val)
    {
        Model.SetColumnBinding(index, val);
    }

    async void OnImportClick()
    {
        await Model.ImportAsync();
    }
}
