@page "/import"

@inherits ViewBase<ImportViewModel>
@inject NavigationManager navigationManager
@inject DialogService dialogService

<BusyLoad Model="Model">
    <RadzenCard>
        <div class="mb-4">
            <InputFile @ref="refInputFile" OnChange="OnFileChangeAsync" class="w-100 mb-2"/> 
            @if (Model.ImportFile != null)
            {
                <div>
                    <b>Modified:</b> @Model.ImportFile.LastModified.ToString(GBUtility.GENERAL_DATE_FORMAT)
                    &nbsp;<b>Size: </b> @((Model.ImportFile.Size / 1024).ToString(GBUtility.THOUSANDS_SEPARATED_FORMAT)) kB
                </div>
            }
        </div>
        <p>Account</p>
        <div class="d-flex">
            <RadzenDropDown TValue="Guid?" Data="Model.Accounts" ValueProperty="Id" TextProperty="Name" @bind-Value="Model.AccountId" class="w-100" Style="max-width:50rem">
                <Template>
                    @context.Name <b>(@context.Bank.Name)</b>
                </Template>
            </RadzenDropDown>
            <RadzenButton class="ml-2" Text="Accounts" Click="OnAccountsClickAsync"/>
            @if (Model.CanImport)
            {
                <RadzenButton Click=@OnImportClickAsync ButtonStyle="ButtonStyle.Success" class="ml-2">Import</RadzenButton>
            }
        </div>
    </RadzenCard>
    <RadzenDataGrid Data="Model.SampleLines" AllowColumnResize="true">
        <Columns>
            @foreach (var i in Enumerable.Range(0, Model.ColumnMapping?.Length ?? 0))
            {            
                <RadzenDataGridColumn TItem="string[]">
                    <HeaderTemplate>
                        <RadzenDropDown style="text-transform: none"
                            TValue="GBColumnName?" TextProperty="Value" ValueProperty="Key" 
                            Data="Enum.GetValues<GBColumnName>().Select(e => new KeyValuePair<GBColumnName, string>(e, ((GBColumnName)e).ToString())) " 
                            @bind-Value="Model.ColumnMapping[i]"
                            Change="@(e => OnColumnMappingChanged(i, (GBColumnName?)e))"
                        />  
                    </HeaderTemplate>
                    <Template>
                        @context[i]
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>    
</BusyLoad>

@code {
    InputFile refInputFile;

    async void OnFileChangeAsync(InputFileChangeEventArgs e)
    {
        Model.ImportFile = e.File;
        await Model.LoadSampleLinesAsync(10);
    }

    void OnColumnMappingChanged(int index, GBColumnName? val)
    {
        Model.SetColumnMapping(index, val);
    }

    async Task OnImportClickAsync()
    {
        if (await Model.ImportAsync())
        {
            navigationManager.NavigateTo($"/review?accountIds={Model.AccountId}");           
        }
    }

    async Task OnAccountsClickAsync()
    {
        await dialogService.OpenAsync<Accounts>("Accounts", options: GBUtility.ResizableDialogOptions);
    }
}
