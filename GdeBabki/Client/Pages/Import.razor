@page "/import"
@using System.IO
@using System.Text
@using GdeBabki.Client.Services
@using GdeBabki.Shared.ViewModels

@inject ImportApi importApi

<h1>Import</h1>
<br />
<InputFile OnChange="LoadFileSample" @ref="inputFile" />
<RadzenDropDown TValue="Guid" Data="model?.Accounts" ValueProperty="AccountId" @bind-Value="accountId">
    <Template>
        @context.Bank|@context.Name
    </Template>
</RadzenDropDown>

@if (sampleLines != null && columnBindings != null)
{
    <RadzenDataGrid Data="sampleLines" AllowColumnResize="true">
        <Columns>
            @foreach (var i in Enumerable.Range(0, columnBindings.Length))
            {
            <RadzenDataGridColumn TItem="string[]">
                <HeaderTemplate>
                    <RadzenDropDown TValue="string" Data="@(Enum.GetNames<GBColumns>())" @bind-Value="columnBindings[i]" Change="@(e => OnColumnBindingChanged((string)e, i))" />
                </HeaderTemplate>
                <Template>
                    @context[i]
                </Template>
            </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>

    <RadzenButton Click=@OnImportClick >Import</RadzenButton>
}

@code {
    ImportViewModel model;
    IList<string[]> sampleLines;
    string[] columnBindings;
    Guid accountId;

    InputFile inputFile;
    IBrowserFile file;

    protected override async Task OnInitializedAsync()
    {
        model = await importApi.GetViewModelAsync();
    }

    async void LoadFileSample(InputFileChangeEventArgs e)
    {
        file = e.File;

        sampleLines = null;
        columnBindings = null;

        using (var stream = file.OpenReadStream())
        {
            var parser = new CsvParser();
            sampleLines = await parser.LoadAsync(stream, 10);

            if (sampleLines.Count > 0)
            {
                columnBindings = new string[sampleLines[0].Length];
            }
        }

        this.StateHasChanged();
    }

    void OnColumnBindingChanged(string val, int index)
    {
        if (val == null)
            return;

        for (var i = 0; i < columnBindings.Length; i++)
        {
            if (i != index && columnBindings[i] == val)
            {
                columnBindings[i] = null;
                break;
            }
        }
    }

    void OnImportClick()
    {
        importApi.ImportAsync(file, columnBindings, accountId);
    }
}
