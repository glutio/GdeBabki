@page "/accounts"
@inherits ViewBase<AccountsViewModel>
@inject DialogService dialogService
@inject ErrorService es

@if (Model.IsLoaded)
{
    if (Model.Accounts.IsNullOrEmpty())
    {
        <div class="w100 text-center">Plase add a bank account</div>
    }
    else
    {
        <RadzenDataList TItem="Account" Data="Model.Accounts">
            <Template>
                @if (Model.EditingAccount == context)
                {
                    <EditAccount Account="context" Cancel="OnEditCancel" Save="OnEditSave" />
                }
                else
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="row w-100 flex-nowrap align-items-center text-break">
                            <div class="col-4">
                                @context.Name
                            </div>
                            <div class="col-8">
                                <b>@context.Bank.Name</b>
                            </div>
                        </div>
                        <div class="flex-shrink-0">
                            <RadzenButton Text="Edit" class="ml-2" Click="() => OnEditClick(context)" IsBusy="Model.IsBusy"></RadzenButton>
                            <RadzenButton Text="Delete" Click="() => OnDeleteClick(context)" ButtonStyle="ButtonStyle.Danger" IsBusy="Model.IsBusy"></RadzenButton>
                        </div>
                    </div>
                }
            </Template>
        </RadzenDataList>
    }

    <hr />    
    <div class="d-flex justify-content-between m-2">
        <div>
            @if (Model.EditingAccount == null)
            {
                <RadzenButton Click="OnAddClick" class="m-2">Add</RadzenButton>       
            }
        </div>
        <RadzenButton Click="() => dialogService.Close()" IsBusy="Model.IsBusy" ButtonStyle="ButtonStyle.Secondary">Close</RadzenButton>
    </div>
    

}
else
{
    <p>Loading...</p>
}

@code {
    void OnAddClick()
    {
        Model.NewAccount();
    }

    void OnEditClick(Account account)
    {
        Model.EditAccount(account);
    }

    async Task OnEditSave(Account account)
    {
        try
        {
            await Model.SaveAccountAsync(account);
        }
        catch (Exception e)
        {
            es.AddError(e.ToString());
        }
    }

    void OnEditCancel()
    {
        Model.CancelEditingAccount();
    }

    void OnDeleteClick(Account account)
    {
        Model.DeleteAccount(account.Id);
    }
}
