@inherits ViewBase<BanksViewModel>
@inject DialogService dialogService

<BusyLoad Model="Model">
    @if (Model.Banks.IsNullOrEmpty())
    {
        <div class="w100 text-center">Plase add a bank</div>
    }
    else
    {   
        <RadzenDataList Data="Model.Banks" TItem="Bank">
            <Template>
                <div class="d-flex justify-content-between align-items-center text-break">
                    <div>
                        @context.Name
                    </div>
                    <div class="flex-shrink-0">
                        <RadzenButton Click="() => OnAddEditClickAsync(context)" class="ml-2">Edit</RadzenButton>
                        <RadzenButton Click="() => OnDeleteClickAsync(context)" ButtonStyle="ButtonStyle.Danger">Delete</RadzenButton>               
                    </div>
                </div>
            </Template>
        </RadzenDataList>
    }

    <hr />
    <div class="d-flex justify-content-between m-2">
        <RadzenButton Click="() => OnAddEditClickAsync(null)">Add</RadzenButton>
        <RadzenButton Click="() => dialogService.Close()" ButtonStyle="ButtonStyle.Secondary">Close</RadzenButton>
    </div>
</BusyLoad>

@code {
    async void OnDeleteClickAsync(Bank bank)
    {
        try
        {
            Model.IsBusy = true;
            await Task.Yield();
            await Model.DeleteBankAsync(bank.Id);
        }
        finally
        {
            Model.IsBusy = false;
        }
    }

    async void OnAddEditClickAsync(Bank bank)
    {
        try
        {
            string name;
            do
            {
                name = await dialogService.OpenInput($"{(bank?.Name == null ? "Add" : "Edit")} Bank", "Please enter bank name", "");
                if (name == null)
                {
                    return;
                }
            } while (!Model.Validate(name));

            Model.IsBusy = true;
            await Task.Yield();

            bank = new Bank()
            {
                Id = bank?.Id ?? Guid.Empty,
                Name = name
            };
            await Model.UpsertBankAsync(bank);           
        }
        finally
        {
            Model.IsBusy = false;
        }
    }
}
