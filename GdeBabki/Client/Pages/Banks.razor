@inherits ViewBase<BanksViewModel>
@inject DialogService dialogService

@if (Model.IsLoaded)
{
    if (Model.Banks.IsNullOrEmpty())
    {
        <div class="w100 text-center">Plase add a bank</div>
    }
    else
    {   
        <RadzenDataList Data="Model.Banks" TItem="Bank">
            <Template>
                <div class="d-flex justify-content-between align-items-center text-break">
                    <div>
                        @context.Name
                    </div>
                    <div class="flex-shrink-0">
                        <RadzenButton @ref="refEditButton" Click="() => OnAddEditClickAsync(context)" IsBusy="IsBusy" class="ml-2">Edit</RadzenButton>
                        <RadzenButton @ref="refDeleteButton" Click="() => OnDeleteClickAsync(context)" IsBusy="IsBusy" ButtonStyle="ButtonStyle.Danger">Delete</RadzenButton>               
                    </div>
                </div>
            </Template>
        </RadzenDataList>
    }

    <hr />
    <div class="d-flex justify-content-between m-2">
        <RadzenButton @ref="refAddButton" Click="() => OnAddEditClickAsync(null)" IsBusy="IsBusy">Add</RadzenButton>
        <RadzenButton Click="() => dialogService.Close()" IsBusy="IsBusy" ButtonStyle="ButtonStyle.Secondary">Close</RadzenButton>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    bool IsBusy { get; set; } = false;

    RadzenButton refAddButton;
    RadzenButton refEditButton;
    RadzenButton refDeleteButton;

    async void OnDeleteClickAsync(Bank bank)
    {
        try
        {
            IsBusy = true;
            await Model.DeleteBankAsync(bank.Id);
        }
        finally
        {
            IsBusy = false;
        }
    }

    async void OnAddEditClickAsync(Bank bank)
    {
        try
        {
            IsBusy = true;
            var name = await dialogService.OpenInput($"{(bank?.Name == null ? "Add" : "Edit")} Bank", "Please enter bank name", bank?.Name);
            if (name == null)
            {
                return;
            }
            bank = new Bank()
            {
                Id = bank?.Id ?? Guid.Empty,
                Name = name
            };

            await Model.UpsertBankAsync(bank);           
        }
        finally
        {
            IsBusy = false;
            StateHasChanged();
        }
    }
}
