@inherits ViewBase<EditAccountViewModel>
@inject DialogService dialogService

<BusyLoad Model="Model">
    <div class="d-flex justify-content-between flex-column">
        <div class="row">
            <div class="col-4">
                <p><b>Account name</b></p>
                <RadzenTextBox @bind-Value="@Model.Account.Name" class="w-100" />
            </div>
            <div class="col-8">
                <p><b>Bank</b></p>
                <div class="d-flex">
                    <RadzenDropDown TValue="Guid" ValueProperty="Id" @bind-Value="@Model.Account.Bank.Id" Data="Model.Banks" TextProperty="Name" class="w-100 mr-2"/>
                    <RadzenButton Click="OnBanksClickAsync">Banks</RadzenButton>
                </div>
            </div>
        </div>
        <div class="d-flex mt-4 justify-content-end">
            <RadzenButton Click="OnSaveClickAsync" class="mr-2" ButtonStyle="ButtonStyle.Success">Save</RadzenButton>
            <RadzenButton Click="OnCancelClickAsync" ButtonStyle="ButtonStyle.Secondary">Cancel</RadzenButton>
        </div>
    </div>
</BusyLoad>

@code {
    [Parameter]
    public Account Account { get { return Model.Account; } set { Model.Account = value; } }
    [Parameter]
    public EventCallback Cancel { get; set; }
    [Parameter]
    public EventCallback<Account> Save { get; set; }

    async Task OnBanksClickAsync()
    {
        await dialogService.OpenAsync<Banks>("Banks", options: GBUtility.ResizableDialogOptions);
    }

    async Task OnSaveClickAsync()
    {
        if (Model.Validate())
        {
            await Save.InvokeAsync(Account);            
        };
    }

    async Task OnCancelClickAsync()
    {
        await Cancel.InvokeAsync();
    }
}
