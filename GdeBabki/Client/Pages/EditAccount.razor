@inject EditAccountViewModel Model
@inject DialogService dialogService

<div class="row">
    <div class="col-4">
        <p><b>Account name</b></p>
        <RadzenTextBox @bind-Value="@Model.Name" Placeholder="account name" Style="width:100%;"/>
    </div>
    <div class="col-3">
        <p><b>Bank</b></p>
            <RadzenDropDown TValue="Guid" ValueProperty="Id" @bind-Value="@Model.BankId" Data="Model.Banks" TextProperty="Name" Style="width:100%"/>
            <div>
                <RadzenButton Click="OnAddDeleteClick">Add/Delete Banks</RadzenButton>
            </div>
    </div>
    <div class="col-5">
        <p>&nbsp;</p>
        <RadzenButton Click="OnSaveClick">Save</RadzenButton>
        <RadzenButton Click="OnCancelClick">Cancel</RadzenButton>
    </div>
</div>

@code {
    [Parameter]
    public Account Account { get; set; }
    [Parameter]
    public EventCallback Cancel { get; set; }
    [Parameter]
    public EventCallback Save { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model.PropertyChanged += (s,e) => StateHasChanged();
        await Model.InitializeAsync();
    }

    protected override void OnParametersSet()
    {
        Model.AccountId = Account?.Id ?? Guid.Empty;
        Model.Name = Account?.Name;
        Model.BankId = Account?.Bank?.Id ?? Guid.Empty;
    }

    async void OnAddDeleteClick()
    {
        await dialogService.OpenAsync<Banks>("Add/Delete Banks");
    }

    async void OnSaveClick()
    {
        await Model.Save();
        await Save.InvokeAsync();
    }

    async void OnCancelClick()
    {
        await Cancel.InvokeAsync();
    }
}
